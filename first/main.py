import unittest
import timeit
from quick_sort import SequentialQuicksort, ParallelQuicksort
from merge_sort import SequentialMergeSort, ParallelMergeSort
from insert_sort import SequentialInsertionSort, ParallelInsertionSort

class TestAlgorithms(unittest.TestCase):
    def setUp(self):
        self.sequential_quicksort = SequentialQuicksort()
        self.parallel_quicksort = ParallelQuicksort()
        self.sequential_merge_sort = SequentialMergeSort()
        self.parallel_merge_sort = ParallelMergeSort()
        self.sequential_insert_sort = SequentialInsertionSort()
        self.parallel_insert_sort = ParallelInsertionSort()

    def test_sequential_quicksort(self):
        array = [629, 52, 878, 206, 897, 52, 832, 510, 336, 710, 835, 723, 665, 210, 781, 114, 697, 939, 6, 774, 864, 956, 995, 386, 761, 366, 143, 906, 411, 947, 162, 27, 187, 866, 132, 827, 969, 462, 810, 463, 471, 437, 302, 806, 461, 768, 944, 675, 697, 315]
        sorted_array = self.sequential_quicksort.sort(array)
        self.assertEqual(sorted_array, [6, 27, 52, 52, 114, 132, 143, 162, 187, 206, 210, 302, 315, 336, 366, 386, 411, 437, 461, 462, 463, 471, 510, 629, 665, 675, 697, 697, 710, 723, 761, 768, 774, 781, 806, 810, 827, 832, 835, 864, 866, 878, 897, 906, 939, 944, 947, 956, 969, 995])
    #     порівняння результатів

    def test_parallel_quicksort(self):
        array = [629, 52, 878, 206, 897, 52, 832, 510, 336, 710, 835, 723, 665, 210, 781, 114, 697, 939, 6, 774, 864, 956, 995, 386, 761, 366, 143, 906, 411, 947, 162, 27, 187, 866, 132, 827, 969, 462, 810, 463, 471, 437, 302, 806, 461, 768, 944, 675, 697, 315]
        sorted_array = self.parallel_quicksort.sort(array)
        self.assertEqual(sorted_array, [6, 27, 52, 52, 114, 132, 143, 162, 187, 206, 210, 302, 315, 336, 366, 386, 411, 437, 461, 462, 463, 471, 510, 629, 665, 675, 697, 697, 710, 723, 761, 768, 774, 781, 806, 810, 827, 832, 835, 864, 866, 878, 897, 906, 939, 944, 947, 956, 969, 995])

    def test_sequential_merge_sort(self):
        array = [629, 52, 878, 206, 897, 52, 832, 510, 336, 710, 835, 723, 665, 210, 781, 114, 697, 939, 6, 774, 864, 956, 995, 386, 761, 366, 143, 906, 411, 947, 162, 27, 187, 866, 132, 827, 969, 462, 810, 463, 471, 437, 302, 806, 461, 768, 944, 675, 697, 315]
        sorted_array = self.sequential_merge_sort.sort(array)
        self.assertEqual(sorted_array, [6, 27, 52, 52, 114, 132, 143, 162, 187, 206, 210, 302, 315, 336, 366, 386, 411, 437, 461, 462, 463, 471, 510, 629, 665, 675, 697, 697, 710, 723, 761, 768, 774, 781, 806, 810, 827, 832, 835, 864, 866, 878, 897, 906, 939, 944, 947, 956, 969, 995])

    def test_parallel_merge_sort(self):
        array = [629, 52, 878, 206, 897, 52, 832, 510, 336, 710, 835, 723, 665, 210, 781, 114, 697, 939, 6, 774, 864, 956, 995, 386, 761, 366, 143, 906, 411, 947, 162, 27, 187, 866, 132, 827, 969, 462, 810, 463, 471, 437, 302, 806, 461, 768, 944, 675, 697, 315]
        sorted_array = self.parallel_merge_sort.sort(array)
        self.assertEqual(sorted_array, [6, 27, 52, 52, 114, 132, 143, 162, 187, 206, 210, 302, 315, 336, 366, 386, 411, 437, 461, 462, 463, 471, 510, 629, 665, 675, 697, 697, 710, 723, 761, 768, 774, 781, 806, 810, 827, 832, 835, 864, 866, 878, 897, 906, 939, 944, 947, 956, 969, 995])

    def test_sequential_insert_sort(self):
        array = [629, 52, 878, 206, 897, 52, 832, 510, 336, 710, 835, 723, 665, 210, 781, 114, 697, 939, 6, 774, 864, 956, 995, 386, 761, 366, 143, 906, 411, 947, 162, 27, 187, 866, 132, 827, 969, 462, 810, 463, 471, 437, 302, 806, 461, 768, 944, 675, 697, 315]
        sorted_array = self.sequential_insert_sort.sort(array)
        self.assertEqual(sorted_array, [6, 27, 52, 52, 114, 132, 143, 162, 187, 206, 210, 302, 315, 336, 366, 386, 411, 437, 461, 462, 463, 471, 510, 629, 665, 675, 697, 697, 710, 723, 761, 768, 774, 781, 806, 810, 827, 832, 835, 864, 866, 878, 897, 906, 939, 944, 947, 956, 969, 995])

    def test_parallel_insert_sort(self):
        array = [629, 52, 878, 206, 897, 52, 832, 510, 336, 710, 835, 723, 665, 210, 781, 114, 697, 939, 6, 774, 864, 956, 995, 386, 761, 366, 143, 906, 411, 947, 162, 27, 187, 866, 132, 827, 969, 462, 810, 463, 471, 437, 302, 806, 461, 768, 944, 675, 697, 315]
        sorted_array = self.parallel_insert_sort.sort(array)
        self.assertEqual(sorted_array, [6, 27, 52, 52, 114, 132, 143, 162, 187, 206, 210, 302, 315, 336, 366, 386, 411, 437, 461, 462, 463, 471, 510, 629, 665, 675, 697, 697, 710, 723, 761, 768, 774, 781, 806, 810, 827, 832, 835, 864, 866, 878, 897, 906, 939, 944, 947, 956, 969, 995])


if __name__ == '__main__':
    unittest.main()

# [629, 52, 878, 206, 897, 52, 832, 510, 336, 710, 835, 723, 665, 210, 781, 114, 697, 939, 6, 774, 864, 956, 995, 386, 761, 366, 143, 906, 411, 947, 162, 27, 187, 866, 132, 827, 969, 462, 810, 463, 471, 437, 302, 806, 461, 768, 944, 675, 697, 315]
# [6, 27, 52, 52, 114, 132, 143, 162, 187, 206, 210, 302, 315, 336, 366, 386, 411, 437, 461, 462, 463, 471, 510, 629, 665, 675, 697, 697, 710, 723, 761, 768, 774, 781, 806, 810, 827, 832, 835, 864, 866, 878, 897, 906, 939, 944, 947, 956, 969, 995]